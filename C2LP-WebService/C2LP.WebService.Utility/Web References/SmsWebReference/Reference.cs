//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace C2LP.WebService.Utility.SmsWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_ITelephone", Namespace="http://tempuri.org/")]
    public partial class PhoneCaller : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CallOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMessageAuthCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMsg2018OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopCallOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PhoneCaller() {
            this.Url = global::C2LP.WebService.Utility.Properties.Settings.Default.C2LP_WebService_Utility_SmsWebReference_PhoneCaller;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CallCompletedEventHandler CallCompleted;
        
        /// <remarks/>
        public event sendMessageAuthCodeCompletedEventHandler sendMessageAuthCodeCompleted;
        
        /// <remarks/>
        public event sendMsg2018CompletedEventHandler sendMsg2018Completed;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event StopCallCompletedEventHandler StopCallCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thermoberg.com/Services/TelephoneService/ITelephone/Call", RequestNamespace="http://www.thermoberg.com/Services/TelephoneService", ResponseNamespace="http://www.thermoberg.com/Services/TelephoneService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Call([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProjectId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string phoneNumber, int CallTimes, [System.Xml.Serialization.XmlIgnoreAttribute()] bool CallTimesSpecified) {
            this.Invoke("Call", new object[] {
                        Key,
                        ProjectId,
                        phoneNumber,
                        CallTimes,
                        CallTimesSpecified});
        }
        
        /// <remarks/>
        public void CallAsync(string Key, string ProjectId, string phoneNumber, int CallTimes, bool CallTimesSpecified) {
            this.CallAsync(Key, ProjectId, phoneNumber, CallTimes, CallTimesSpecified, null);
        }
        
        /// <remarks/>
        public void CallAsync(string Key, string ProjectId, string phoneNumber, int CallTimes, bool CallTimesSpecified, object userState) {
            if ((this.CallOperationCompleted == null)) {
                this.CallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallOperationCompleted);
            }
            this.InvokeAsync("Call", new object[] {
                        Key,
                        ProjectId,
                        phoneNumber,
                        CallTimes,
                        CallTimesSpecified}, this.CallOperationCompleted, userState);
        }
        
        private void OnCallOperationCompleted(object arg) {
            if ((this.CallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thermoberg.com/Services/TelephoneService/ITelephone/sendMessageAuthCod" +
            "e", RequestNamespace="http://www.thermoberg.com/Services/TelephoneService", ResponseNamespace="http://www.thermoberg.com/Services/TelephoneService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendMessageAuthCode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProjectId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string AuthCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string phoneNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string message, out bool sendMessageAuthCodeResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendMessageAuthCodeResultSpecified) {
            object[] results = this.Invoke("sendMessageAuthCode", new object[] {
                        key,
                        ProjectId,
                        AuthCode,
                        phoneNumber,
                        message});
            sendMessageAuthCodeResult = ((bool)(results[0]));
            sendMessageAuthCodeResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendMessageAuthCodeAsync(string key, string ProjectId, string AuthCode, string phoneNumber, string message) {
            this.sendMessageAuthCodeAsync(key, ProjectId, AuthCode, phoneNumber, message, null);
        }
        
        /// <remarks/>
        public void sendMessageAuthCodeAsync(string key, string ProjectId, string AuthCode, string phoneNumber, string message, object userState) {
            if ((this.sendMessageAuthCodeOperationCompleted == null)) {
                this.sendMessageAuthCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMessageAuthCodeOperationCompleted);
            }
            this.InvokeAsync("sendMessageAuthCode", new object[] {
                        key,
                        ProjectId,
                        AuthCode,
                        phoneNumber,
                        message}, this.sendMessageAuthCodeOperationCompleted, userState);
        }
        
        private void OnsendMessageAuthCodeOperationCompleted(object arg) {
            if ((this.sendMessageAuthCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMessageAuthCodeCompleted(this, new sendMessageAuthCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thermoberg.com/Services/TelephoneService/ITelephone/sendMsg2018", RequestNamespace="http://www.thermoberg.com/Services/TelephoneService", ResponseNamespace="http://www.thermoberg.com/Services/TelephoneService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void sendMsg2018([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string projectId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string phoneNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string msg, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string extField1, out bool sendMsg2018Result, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool sendMsg2018ResultSpecified) {
            object[] results = this.Invoke("sendMsg2018", new object[] {
                        key,
                        projectId,
                        authCode,
                        phoneNumber,
                        msg,
                        extField1});
            sendMsg2018Result = ((bool)(results[0]));
            sendMsg2018ResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void sendMsg2018Async(string key, string projectId, string authCode, string phoneNumber, string msg, string extField1) {
            this.sendMsg2018Async(key, projectId, authCode, phoneNumber, msg, extField1, null);
        }
        
        /// <remarks/>
        public void sendMsg2018Async(string key, string projectId, string authCode, string phoneNumber, string msg, string extField1, object userState) {
            if ((this.sendMsg2018OperationCompleted == null)) {
                this.sendMsg2018OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMsg2018OperationCompleted);
            }
            this.InvokeAsync("sendMsg2018", new object[] {
                        key,
                        projectId,
                        authCode,
                        phoneNumber,
                        msg,
                        extField1}, this.sendMsg2018OperationCompleted, userState);
        }
        
        private void OnsendMsg2018OperationCompleted(object arg) {
            if ((this.sendMsg2018Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMsg2018Completed(this, new sendMsg2018CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thermoberg.com/Services/TelephoneService/ITelephone/SendMessage", RequestNamespace="http://www.thermoberg.com/Services/TelephoneService", ResponseNamespace="http://www.thermoberg.com/Services/TelephoneService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendMessage([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProjectId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string phoneNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string message) {
            this.Invoke("SendMessage", new object[] {
                        key,
                        ProjectId,
                        phoneNumber,
                        message});
        }
        
        /// <remarks/>
        public void SendMessageAsync(string key, string ProjectId, string phoneNumber, string message) {
            this.SendMessageAsync(key, ProjectId, phoneNumber, message, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string key, string ProjectId, string phoneNumber, string message, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        key,
                        ProjectId,
                        phoneNumber,
                        message}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.thermoberg.com/Services/TelephoneService/ITelephone/StopCall", RequestNamespace="http://www.thermoberg.com/Services/TelephoneService", ResponseNamespace="http://www.thermoberg.com/Services/TelephoneService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StopCall([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProjectId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string phoneNumber) {
            this.Invoke("StopCall", new object[] {
                        Key,
                        ProjectId,
                        phoneNumber});
        }
        
        /// <remarks/>
        public void StopCallAsync(string Key, string ProjectId, string phoneNumber) {
            this.StopCallAsync(Key, ProjectId, phoneNumber, null);
        }
        
        /// <remarks/>
        public void StopCallAsync(string Key, string ProjectId, string phoneNumber, object userState) {
            if ((this.StopCallOperationCompleted == null)) {
                this.StopCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopCallOperationCompleted);
            }
            this.InvokeAsync("StopCall", new object[] {
                        Key,
                        ProjectId,
                        phoneNumber}, this.StopCallOperationCompleted, userState);
        }
        
        private void OnStopCallOperationCompleted(object arg) {
            if ((this.StopCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopCallCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CallCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void sendMessageAuthCodeCompletedEventHandler(object sender, sendMessageAuthCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMessageAuthCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMessageAuthCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool sendMessageAuthCodeResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendMessageAuthCodeResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void sendMsg2018CompletedEventHandler(object sender, sendMsg2018CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMsg2018CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMsg2018CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool sendMsg2018Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool sendMsg2018ResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SendMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StopCallCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591